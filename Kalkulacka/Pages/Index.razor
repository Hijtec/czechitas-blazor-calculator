@page "/"

<PageTitle>Kalkulačka</PageTitle>
<h1 class="text-center">Moje Kalkulačka</h1>
<div class="calculator">
    <div class="display">@displayText</div>
    <div class="keypad">
        <div class="keypad-row">
            <button @onclick="() => AddInput(7)">7</button>
            <button @onclick="() => AddInput(8)">8</button>
            <button @onclick="() => AddInput(9)">9</button>
        </div>
        <div class="keypad-row">
            <button @onclick="() => AddInput(4)">4</button>
            <button @onclick="() => AddInput(5)">5</button>
            <button @onclick="() => AddInput(6)">6</button>
        </div>
        <div class="keypad-row">
            <button @onclick="() => AddInput(1)">1</button>
            <button @onclick="() => AddInput(2)">2</button>
            <button @onclick="() => AddInput(3)">3</button>
        </div>
        <div class="keypad-row">
            <button @onclick="() => AddInput(0)">0</button>
            <button @onclick="() => AddDecimalPoint()">.</button>
        </div>
        <div class="keypad-row">
            <button @onclick="() => SetOperation(knownOperators[0])">@knownOperators[0]</button>
            <button @onclick="() => SetOperation(knownOperators[1])">@knownOperators[1]</button>
            <button @onclick="() => SetOperation(knownOperators[2])">@knownOperators[2]</button>
            <button @onclick="() => SetOperation(knownOperators[3])">@knownOperators[3]</button>
            <button @onclick="() => SetOperation(knownOperators[4])">@knownOperators[4]</button>
        </div>
        <div class="keypad-row">
            <button class="btn btn-primary" @onclick="() => CalculateResult()">=</button>
            <button class="btn btn-danger" @onclick="() => Clear()">C</button>
        </div>
    </div>
</div>

<div class="container">
    <h2>Historie</h2>
    @* EXTRA: Pridejte logiku zobrazovani hisorie *@
    @foreach (string item in history)
    {
        <p>@item</p>
    }
</div>

@code {
    private string displayText = "0"; // Aktualni text na displayi
    private double firstNumber = 0; // První číslo
    private string selectedOperator; // Operátor
    private string[] knownOperators = { "+", "-", "*", "/", "^" };
    private List<string> history = new List<string>(); //EXTRA: history reprezentuje historii všech operací od zapnutí
                                                       //ovladačky

    //TODO: Budeme potřebovat instanciovat naši kalkulačku.
    private Calculator calculator = new Calculator();

    //TODO: Vyřešte funkcionalitu zadávání číselných vstupů.
    private void AddInput(int number)
    {
        if (displayText == "0")
        {
            displayText = number.ToString();
        }
        else
        {
            displayText += number.ToString();
        }
    }
    //TODO: Vyřešte funkcionalitu přidání desetinné čárky.
    private void AddDecimalPoint()
    {
        if (!displayText.Contains("."))
        {
            displayText += ".";
        }
    }

    //TODO: Zpracuje aktuální text na displayi jako první číslo, vyčistí display, a dle stisknuté operace uloží operaci do
    // proměnné selectedOperator.
    private void SetOperation(string operationInput)
    {
        firstNumber = double.Parse(displayText, System.Globalization.CultureInfo.InvariantCulture);
        calculator.NastavAktualniVysledek(firstNumber);
        displayText = "";
        selectedOperator = operationInput;
    }

    //TODO: Zpracuje aktuální text na displayi jako druhé číslo, necháme kalkulačku vypočítat výsledek. Výsledek pak zobrazí
    //na display.
    //Extra: Zapamatuje si celý výraz a přidá ho do historie
    private void CalculateResult()
    {
        //double secondNumber = double.Parse(displayText);
        double secondNumber = double.Parse(displayText, System.Globalization.CultureInfo.InvariantCulture);
        if (calculator.JeOperatorPodporovan(selectedOperator))
        {
            switch (selectedOperator)
            {
                case "+":
                    calculator.Secti(secondNumber);
                    break;
                case "-":
                    calculator.Odecti(secondNumber);
                    break;
                case "*":
                    calculator.Nasob(secondNumber);
                    break;
                case "/":
                    calculator.Vydel(secondNumber);
                    break;
                case "^":
                    calculator.Umocni(secondNumber);
                    break;
                default:
                    break;
            }

            displayText = calculator.VratAktualniVysledek().ToString();
            history.Add($"{firstNumber} {selectedOperator} {secondNumber} = {displayText}");
        }
    }

    //TODO: Vymaže všechen text aktuálně zapsaný na displayi.
    private void Clear()
    {
        displayText = "0";
    }
}
